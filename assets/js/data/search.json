[ { "title": "[번역] Go Style Decision 2", "url": "/posts/%EB%B2%88%EC%97%AD-go-style-decision-2/", "categories": "golang", "tags": "golang", "date": "2023-07-09 20:53:35 +0900", "snippet": "반복Go 소스 코드는 불필요한 반복을 피해야 합니다. 주로 보이는 실수는 불필요한 단어를 포함하거나 컨텍스트나 유형을 반복하는 것입니다. 코드 자체도 같거나 유사한 코드 세그먼트가 근접한 위치에서 여러 번 나타나면 불필요하게 반복적일 수 있습니다.반복적인 이름은 다양한 형태로 나타날 수 있습니다.Package vs. exported symbol nameexported symbol name을 지정할 때 패키지 이름은 항상 패키지 외부에서 가시적이므로 두 곳 사이의 중복 정보를 줄이거나 제거해야 합니다. 패키지가 하나의 유형만 내..." }, { "title": "[번역] Go Style Decision", "url": "/posts/%EB%B2%88%EC%97%AD-go-style-decision/", "categories": "golang", "tags": "golang", "date": "2023-07-02 18:03:36 +0900", "snippet": "소개이 문서에는 Go 가독성 멘토들의 제시한 조언에 대한 표준 가이드, 설명 및 예제를 통합 및 제공하기 위한 스타일 결정이 포함되어 있습니다.이 문서는 완전한 것이 아니며 시간이 지남에 따라 계속해서 발전할 것입니다. 핵심 스타일 가이드와 여기에서 제공된 조언이 상충하는 경우 스타일 가이드가 우선하며 이 문서는 그에 맞게 업데이트되어야 합니다.전체 Go 스타일 문서 세트는 개요를 참조하세요.다음 섹션은 스타일 결정에서 스타일 가이드의 다른 부분으로 이동되었습니다:MixedCaps: guide#mixed-caps 참조Forma..." }, { "title": "[번역] Go Style Guide 2", "url": "/posts/%EB%B2%88%EC%97%AD-go-style-guide-2/", "categories": "golang", "tags": "golang", "date": "2023-06-18 12:20:07 +0900", "snippet": "간결성간결한 Go 코드는 노이즈 대비 신호가 높습니다. 네이밍과 구조를 통해 관련된 세부사항을 쉽게 파악할 수 있습니다.주어진 시점에서 가장 중요한 세부사항을 도출하는 데 방해가 되는 요소가 많이 있습니다: 반복적인 코드 불필요한 구문 불투명한 이름 불필요한 추상화 공백특히 반복적인 코드는 각각 거의 동일한 섹션들 간의 차이를 흐려지게 하며, 독자는 변경 사항을 찾기 위해 비슷한 코드 라인들을 시각적으로 비교해야 합니다. 테이블 기반 테스트는 각 반복의 중요한 세부사항에서 공통 코드를 간결하게 추출하는 좋은 예입니다...." }, { "title": "[번역] Go Style Guide", "url": "/posts/%EB%B2%88%EC%97%AD-go-style-guide/", "categories": "golang", "tags": "golang", "date": "2023-06-04 16:24:06 +0900", "snippet": "스타일 원칙가독성이 좋은 Go 코드를 작성하는 방법을 요약한 몇 가지 원칙이 있습니다. 다음은 가독성이 좋은 코드의 특성입니다. 중요도순으로 나열합니다. 명확성: 독자의 입장에서코드의 목적과 이유가 명확합니다. 간결성: 코드는 가능한 간단한 방식으로 목표를 달성합니다. 간결성: 코드는 높은 신호 대 잡음 비율을 가집니다. 유지 보수성: 코드는 쉽게 유지 보수할 수 있도록 작성됩니다. 일관성: 코드는 Google 코드베이스 전체와 일관되게 작성됩니다.명확성가독성의 핵심 목표는 독자에게 명확한 코드를 제공하는 것입니다.명..." }, { "title": "[golang 비동기 패턴] Pipeline 패턴", "url": "/posts/golang-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%8C%A8%ED%84%B4-pipeline-%ED%8C%A8%ED%84%B4/", "categories": "golang", "tags": "golang", "date": "2023-05-20 23:04:43 +0900", "snippet": "package mainimport &quot;fmt&quot;func worker(in chan int, do func(int) int) chan int { out := make(chan int) go func() { defer close(out) for i := range in { out &amp;lt;- do(i) } }() return out}func run(in chan int) chan int { for i := 0; i &amp;lt; 5; i++ { in = worker(in, func(num int) ..." }, { "title": "[함수형 프로그래밍] 2. 액션에서 계산 분리하기", "url": "/posts/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-2-%EC%95%A1%EC%85%98%EC%97%90%EC%84%9C-%EA%B3%84%EC%82%B0-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0/", "categories": "함수형", "tags": "Functional", "date": "2023-03-26 23:41:35 +0900", "snippet": "액션은 실행할 때마다 항상 같은 결과가 나옴이 보장되지 않는 동작입니다. 함수형 프로그래밍에서 액션과 계산을 분리하는 건 중요합니다. 왜냐하면 계산은 테스트하기 쉽고, 기계적인 분석이 쉽고, 조합하기 좋기 때문입니다. 계산은 함수형 프로그래밍에서 전문적인 용어로 순수 함수 또는 수학 함수라고 불리기도 합니다.액션에서 계산을 분리하는 방법은 다음과 같습니다. 서브루틴 추출하기 암묵적 입력과 출력 찾기 암묵적 입력은 인자로 암묵적 출력은 리턴값으로 바꾸기암묵적 입력의 예는 다음과 같습니다.let num1 = 1let num2..." }, { "title": "[함수형 프로그래밍] 1. 액션, 계산, 데이터", "url": "/posts/1-%EC%95%A1%EC%85%98-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0/", "categories": "함수형", "tags": "Functional", "date": "2023-02-26 18:35:18 +0900", "snippet": "서점에서 재미있는 책을 봤다. 쏙쏙들어오는 함수형 코딩이라는 책이다. 함수형 코딩에 대해 예제를 들어 정성들여 설명하고 있다. 나는 단순히 함수형 프로그래밍에 대해 알고 싶어서 이 책을 읽었는데, 그 외적으로 많은 것을 알게 되었다. 대표적으로 아래와 같다. 좋은 코드란 뭐지? 우리의 프로그램이 테스트가 어려운 이유가 뭐지?아마 개발자라면 누구나 고민해봤을 문제일 것이다. 앞으로 이 책을 요약하는 글을 쓸 것이고, 오늘은 함수형 프로그래밍의 기본 용어인 액션, 계산, 데이터를 정리해보겠다. 함수형 프로그래밍은 컴퓨터 프로..." }, { "title": "글또 다짐", "url": "/posts/%EA%B8%80%EB%98%90-%EB%8B%A4%EC%A7%90/", "categories": "JUST", "tags": "", "date": "2023-02-12 20:06:19 +0900", "snippet": "글또 지원 동기개발 블로그를 하고 싶었는데, 게으른 완벽주의자인 나는 글을 쓰지 못하고 있었다. 누군가와 같이 글을 쓰면 좋겠다는 생각을 하게 됐고, 글쓰기 커뮤니티를 찾았다. 그렇게 알게 된 것이 글또다.평소 SNS를 멀리하는 편이어서 계속 글또 지원 시기를 놓쳤는데, 이번에 들어가니까 이메일 알림 시스템이 생겼다. 그래서 알림을 신청했고 무사히 지원할 수 있었다.글또 8기 다짐 일단 쓰자! 좋은 글이 뭔지 생각해보자! 적용하자! 첫번째로 해결해야할 문제는 내 게으른 완벽주의다. 일단 부족하다고 생각되더..." }, { "title": "(Chromium) Chromium의 빌드", "url": "/posts/chromium-chromium%EC%9D%98-%EB%B9%8C%EB%93%9C/", "categories": "Chromium", "tags": "chromium", "date": "2021-12-06 15:02:45 +0900", "snippet": "크로미엄 빌드 명령어Setting up the buildgn gen out/Defaultgn args out/DefaultBuild Chromiumautoninja -C out/Default chromeNinja/gn 이란?ninja는 빌드 시스템이다.빌드 시스템이란?빌드 : 소스 코드가 컴퓨터에서 실행될 수 있는 상태로 만드는 일빌드 시스템 : 빌드를 자동화하기 위한 프로그램예) Make와 CMakeMakefile을 사용하면 make 명령어를 이용해 빌드할 수 있다.CmakeLists를 사용하면 Makefile을 만들 수 ..." }, { "title": "(Chromium) CodeHealth : Remove use of ListValue::GetString()", "url": "/posts/chromium/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-11-29 16:41:09 +0900", "snippet": "Code Health Issue 란Code Health 이슈는 가장 접근하기 쉬운 이슈이다.오래된 함수를 새 함수로 교체하는 작업을 해준다.나는 ListValue::GetString() 함수를 Value::GetString() 함수로 바꾸는 작업을 해주었다.Merge사실 너무 간단한 작업이라 금방 끝났고 리뷰 과정에서도 별 문제없이 Merge 되었다." }, { "title": "(Chromium) Fix a bug that marker pseudo-element is adding extra margin-right", "url": "/posts/chromium-fix-a-bug-that-marker-pseudo-element-is-adding-extra-margin-right/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-11-29 16:20:59 +0900", "snippet": "서론이슈를 찾아 여행하던 중..굉장히 해결하기 쉬울 것 같은 이슈를 잡았다.(하지만 그것은 착각이었다;;)https://bugs.chromium.org/p/chromium/issues/detail?id=1241974굉장히 쉽게 해결할 수 있을줄 알았지만…본론설명다른 브라우저들과 달리 list marker의 margin이 chromium에서는 너무 길게 할당되어 이를 짧게 수정하였다.무슨 뜻인지 잘 모를 것이다. 사진으로 확인해보자.위의 사진이 before의 사진이다.위의 사진이 수정을 한 후 after 사진이다.차이를 못느끼겠..." }, { "title": "(Chromium) CodeHealth : Remove use of ListValue::GetDictionary()", "url": "/posts/chromium-codehealth-remove-use-of-listvalue-getdictionary/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-10-26 16:36:19 +0900", "snippet": "Code Health Issue 란Code Health 이슈는 가장 접근하기 쉬운 이슈이다.오래된 함수를 새 함수로 교체하는 작업을 해준다.나는 ListValue::Get() 함수를 Value::GetList()[] 함수로 바꾸는 작업을 해주었다.OOB란?이 작업을 하고 리뷰를 받는 중에 Reviewer가 물었다. “Just confirming, this CHECKS on range OOB, right?”Out Of Bound의 준말이다. Out Of Bound 체크를 안할 경우 잘못된 메모리에 접근하더라도 프로그램이 종료되..." }, { "title": "(Chromium) Report input type time bug", "url": "/posts/chromium-input-time-issue/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-10-19 13:00:00 +0900", "snippet": "input type time 태그에 버그가 발견되어서 이를 보고했다.어떤 버그인가?&amp;lt;input type=&quot;time&quot; value=&quot;13:50:02.922&quot;&amp;gt;은 기본적으로 분 단위로 값 변경이 가능하다. 따라서 시간 필드와 분 필드, 초 필드, 밀리초 필드가 있지만 초 필드와 밀리 초 필드는 비활성화된다.하지만 옆에 있는 시계 버튼을 눌러 그래픽 편집기를 열면 초와 밀리초를 변경할 수 있게 된다. 이는 의도치 않은 동작이라고 생각했다.버그 보고하기버그를 보고하기 위해 간..." }, { "title": "(Chromium) Fix accessibility bug for date_time_field", "url": "/posts/chromium-accessibility-issue/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-10-05 15:44:00 +0900", "snippet": "크로미움에서 해결한 두번째 이슈다.Accessibility란 장애를 가지고 있는 사람들도 장애를 가지고 있지 않은 사람들과 동일한 경험을 할 수 있도록 도와주는 기능을 뜻한다.이번에 해결한 issue는 Accessibility에 관련된 이슈다.이 이슈를 해결하기 위해서 많은 사전 지식이 필요했다. 내가 알고 있는 지식은 해당 issue를 해결할 수 있을 정도의 깊이이니 참고하길 바란다.Issue 설명pseudo-elementaria attribute 접근가능한 리치 인터넷 어플리케이션(Accessible Rich Intern..." }, { "title": "(Chromium) Improve text matching for datalist", "url": "/posts/chromium-autocomplete-issue/", "categories": "Chromium, Issue", "tags": "chromium, issue", "date": "2021-09-26 15:44:00 +0900", "snippet": "크로미엄의 이슈를 탐색하다가 드디어 이해 가능한 이슈를 발견했다. 내가 크로미엄에서 첫번째로 해결한 이슈다.Issue 설명위 사진은 Issue를 보고한 분이 올려준 html 파일이다. 설명은 간단하다.&amp;lt;datalist id=&quot;DataListId&quot;&amp;gt; &amp;lt;option value=&quot;2485&quot;&amp;gt;Hozelock 10m Mini Auto Reel - 2485&amp;lt;/option&amp;gt; &amp;lt;option value=&quot;24..." }, { "title": "(Paper) PointMixup", "url": "/posts/point-mixup/", "categories": "Paper, Cloud Point", "tags": "cloud point, data augmentation", "date": "2021-09-23 23:11:00 +0900", "snippet": "이미지에서 적용되는 방법인 Mixup을 Point Cloud에 적용하려는 시도가 PointMixup이다. Mixup이 왜 Point Cloud에 적용되지 않는지를 밝히고 Point Cloud에 Mixup을 도입하기 위한 방법을 제시한다.왜 기존의 Mixup은 Point Cloud에 적용되지 않는가?왜냐하면 Point Cloud에는 정규 표현 방법이 없기 때문이다. 무슨 소리냐면 이미지의 경우 픽셀 그리드라는 표현 방법이 존재한다. 따라서 A라는 이미지와 B라는 이미지를 같은 위치의 픽셀끼리 더할 수 있다. 하지만 Raw Poi..." }, { "title": "(Paper) PointNet : raw cloud point as input", "url": "/posts/classification-cloud-point/", "categories": "Paper, Cloud Point", "tags": "cloud point", "date": "2021-09-19 23:11:00 +0900", "snippet": "raw 클라우드 포인터를 딥러닝의 input으로 사용하려는 시도에 대해 공부해보려고 한다.PointNet라는 논문에 대해 정리해보도록 하겠다.PointNet은 Classification, Segmentation에 모두 적용될 수 있지만 이 글에서는 Classification에 대해서만 다루기로 하겠다.Classification TaskPointNet을 설명하기 전에 Classification 문제의 기본 구조를 설명하도록 하겠다.GT이 논문에서는 Dataset으로 ModelNet40을 사용했다. ModelNet40은 인위적으..." }, { "title": "(Chromium) Test", "url": "/posts/chromium-test/", "categories": "Chromium", "tags": "chromium", "date": "2021-09-19 23:11:00 +0900", "snippet": "Chromium의 이슈를 지금까지 3개 해결했다. 그리고 3개의 이슈 모두 테스트 파일을 작성했다. 이 글에서는 Chromium의 이슈를 해결하면서 경험한 Test 파일 작성에 대해 쓰겠다.Test 파일을 언제 작성할까? 패치를 올렸는데 리뷰어가 테스트 파일도 같이 올려달라고 한다. Test 파일을 언제 작성하는 건가? 기능을 추가했거나 원래 있던 기능을 변경했을 때 테스트 파일을 수정하거나 새로 작성한다. 혹시 테스트 파일을 작성해야할지 말지 모르겠다면 일단 패치를 올리고 리뷰를 받아보자. 그럼 테스트 파일이 필요한 패치..." }, { "title": "(Paper) Deep Learning for LiDAR", "url": "/posts/lidar-deep-learning/", "categories": "Paper, LiDAR", "tags": "lidar", "date": "2021-09-12 23:11:00 +0900", "snippet": "LiDAR 데이터의 Data Augmentation에 관한 논문을 읽고 있다가 해당 주제와 관련된 연구 동향에 대해 잘 정리된 부분이 있어 관련 글을 작성한다.3D Object Detection3D object detection은 크게 세가지 방법으로 나누어진다. Projection / View-based Voxel-based VoxelNet SECOND Raw point cloud-based Point RCNN Point Pillars 그리고 Voxe..." }, { "title": "첫번째 포스팅", "url": "/posts/first-post/", "categories": "Just", "tags": "just", "date": "2021-09-12 20:24:00 +0900", "snippet": "나의 첫번째 포스팅제대로 작동하는지 테스트해보자." } ]
